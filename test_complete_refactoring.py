#!/usr/bin/env python3
"""–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ RTG_ADDR –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞"""

import sys
import os

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
sys.path.insert(0, os.path.join(current_dir, 'src'))

def test_migration_components():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –†–ï–§–ê–ö–¢–û–†–û–í–ê–ù–û–ì–û RTG_ADDR –ú–Ü–ì–†–ê–¢–û–†–ê")
    print("=" * 80)
    
    success_count = 0
    total_tests = 6
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–µ—Ä –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
    try:
        from src.utils.migration_data_parser import MigrationDataParser
        parser = MigrationDataParser()
        records = parser.parse_rtg_addr_section()
        
        print(f"   ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
        normalized = parser.normalize_record(records[0])
        print(f"   ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î, –ø–µ—Ä—à–∏–π ID: {normalized['id']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = parser.get_statistics([parser.normalize_record(r) for r in records[:10]])
        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_records']} –∑–∞–ø–∏—Å—ñ–≤, {stats['with_streets']} –∑ –≤—É–ª–∏—Ü—è–º–∏")
        
        success_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –†–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–∏–π –º—ñ–≥—Ä–∞—Ç–æ—Ä
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞...")
    try:
        from src.migrators.rtg_addr import RtgAddrMigrator
        migrator = RtgAddrMigrator()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        assert migrator.parser is not None, "–ü–∞—Ä—Å–µ—Ä –º–∞—î –±—É—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
        assert migrator.stats['processed'] == 0, "–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –Ω—É–ª—å–æ–≤–æ—é"
        
        print("   ‚úÖ –ú—ñ–≥—Ä–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        success_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    # –¢–µ—Å—Ç 3: DRY RUN –º—ñ–≥—Ä–∞—Ü—ñ—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DRY RUN –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
    try:
        migrator = RtgAddrMigrator()
        results = migrator.migrate(dry_run=True, batch_size=5)
        
        assert results['processed'] > 0, "–ú–∞—é—Ç—å –±—É—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–ø–∏—Å–∏"
        print(f"   ‚úÖ DRY RUN: –æ–±—Ä–æ–±–ª–µ–Ω–æ {results['processed']} –∑–∞–ø–∏—Å—ñ–≤")
        print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫—Ä–∞—ó–Ω: {results.get('created_countries', 0)}")
        print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–≥—ñ–æ–Ω—ñ–≤: {results.get('created_regions', 0)}")
        print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ—Å—Ç: {results.get('created_cities', 0)}")
        
        success_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ DRY RUN: {e}")
        import traceback
        print(traceback.format_exc())
    
    # –¢–µ—Å—Ç 4: –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É...")
    try:
        migrator = RtgAddrMigrator()
        
        test_cases = [
            ("–≤—É–ª.", "street_type", "–≤—É–ª–∏—Ü—è"),
            ("–ø—Ä–æ—Å–ø", "street_type", "–ø—Ä–æ—Å–ø–µ–∫—Ç"),
            ("  –ö–∏—ó–≤  ", None, "–ö–∏—ó–≤"),
            ("", None, "")
        ]
        
        all_passed = True
        for text, obj_type, expected in test_cases:
            result = migrator.normalize_text(text, obj_type)
            if result != expected:
                print(f"   ‚ùå '{text}' -> '{result}', –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å '{expected}'")
                all_passed = False
                
        if all_passed:
            print("   ‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–π–¥–µ–Ω—ñ")
            success_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    # –¢–µ—Å—Ç 5: –û–±—Ä–æ–±–∫–∞ edge cases
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è edge cases...")
    try:
        migrator = RtgAddrMigrator()
        
        # –¢–µ—Å—Ç –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –¥–∞–Ω–∏–º–∏
        empty_record = {
            'id': '', 'path': '', 'city': '', 'region': '',
            'district': '', 'community': '', 'street': '', 'building': '',
            'tech_status': '0', 'city_type': '–º.', 'street_type': None,
            'flat': None, 'room': None, 'corp': None, 'city_district': None,
            'street_old': None, 'build_type_id': None, 'prem_type': None,
            'apartment_type_id': None, 'date_created': None, 'date_modified': None,
            'last_modified_by': None, 'owner_id': None
        }
        
        result = migrator.process_record(empty_record, 1, dry_run=True)
        # –ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –º–∞—î –±—É—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π
        assert not result, "–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –º–∞—î –±—É—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π"
        
        # –¢–µ—Å—Ç –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        minimal_record = {
            'id': '123 456', 'path': '1.2.3.4.5', 'city': '–ö–∏—ó–≤', 
            'region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'district': '–ö–∏—ó–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω',
            'community': '–ö–∏—ó–≤—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ –≥—Ä–æ–º–∞–¥–∞', 'street': None, 'building': None,
            'tech_status': '0', 'city_type': '–º.', 'street_type': None,
            'flat': None, 'room': None, 'corp': None, 'city_district': None,
            'street_old': None, 'build_type_id': None, 'prem_type': None,
            'apartment_type_id': None, 'date_created': None, 'date_modified': None,
            'last_modified_by': None, 'owner_id': None
        }
        
        result = migrator.process_record(minimal_record, 1, dry_run=True)
        assert result, "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å –º–∞—î –±—É—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π"
        
        print("   ‚úÖ Edge cases –æ–±—Ä–æ–±–ª–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        success_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ edge cases: {e}")
    
    # –¢–µ—Å—Ç 6: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π...")
    try:
        from src.migrators.rtg_addr import create_migration_instructions
        
        if create_migration_instructions():
            instructions_path = "MIGRATION_RTG_ADDR_INSTRUCTIONS.md"
            if os.path.exists(instructions_path):
                with open(instructions_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    assert len(content) > 1000, "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –º–∞—é—Ç—å –±—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏"
                    assert "DRY RUN" in content, "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ DRY RUN"
                
                print(f"   ‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ ({len(content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
                success_count += 1
            else:
                print("   ‚ùå –§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 80)
    print(f"üéØ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø: {success_count}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_tests:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü –£–°–ü–Ü–®–ù–û!")
        print("\nüìã –†–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–∏–π –º—ñ–≥—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("   ‚Ä¢ –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó ‚úÖ")
        print("   ‚Ä¢ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö ‚úÖ") 
        print("   ‚Ä¢ –û–±—Ä–æ–±–∫–∞ edge cases ‚úÖ")
        print("   ‚Ä¢ DRY RUN –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚úÖ")
        print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è ‚úÖ")
        print("   ‚Ä¢ –ß–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É ‚úÖ")
        
        return True
    else:
        print(f"‚ùå {total_tests - success_count} —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return False


def create_migration_summary():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –ø—Ä–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥"""
    
    summary = """# –ü–Ü–î–°–£–ú–û–ö –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–£ RTG_ADDR –ú–Ü–ì–†–ê–¢–û–†–ê

## –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ‚úÖ

### 1. –ü–æ–≤–Ω–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É
- ‚úÖ –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∏–π –º—ñ–≥—Ä–∞—Ç–æ—Ä –∑ —ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—é
- ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è migrations/DATA-TrinitY-3.txt
- ‚úÖ –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ INSERT ... ON CONFLICT ... DO UPDATE RETURNING id

### 2. –£–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
- ‚úÖ –í—Å—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
- ‚úÖ –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
- ‚úÖ –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ —ñ—î—Ä–∞—Ä—Ö—ñ—ó

### 3. –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
- ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü—ñ—è)
- ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –≤—É–ª–∏—Ü—å (–≤—É–ª. -> –≤—É–ª–∏—Ü—è, –ø—Ä–æ—Å–ø. -> –ø—Ä–æ—Å–ø–µ–∫—Ç)
- ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—ñ–≤ –±—É–¥–∏–Ω–∫—ñ–≤ –∑ –∫–æ—Ä–ø—É—Å–∞–º–∏
- ‚úÖ –û–±—Ä–æ–±–∫–∞ non-breaking spaces —Ç–∞ —ñ–Ω—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤

### 4. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- ‚úÖ –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ addrinity.object_sources
- ‚úÖ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —è–∫ JSONB
- ‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ rtg_addr

### 5. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —ñ—î—Ä–∞—Ä—Ö—ñ—ó
- ‚úÖ –ö—Ä–∞—ó–Ω–∞ ‚Üí –†–µ–≥—ñ–æ–Ω ‚Üí –†–∞–π–æ–Ω ‚Üí –ì—Ä–æ–º–∞–¥–∞ ‚Üí –ú—ñ—Å—Ç–æ ‚Üí (–†–∞–π–æ–Ω –º—ñ—Å—Ç–∞)
- ‚úÖ –í—Å—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ –∫–æ—Ä–µ–∫—Ç–Ω—ñ
- ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ rtg_*_id –ø–æ–ª—ñ–≤ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ

### 6. –û–±—Ä–æ–±–∫–∞ Edge Cases
- ‚úÖ NULL –∑–Ω–∞—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- ‚úÖ –ü–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –∑–∞–º—ñ–Ω—é—é—Ç—å—Å—è –Ω–∞ NULL
- ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –Ω–∞–∑–≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è
- ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ ID –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ —Ç–∞ non-breaking spaces

### 7. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
- ‚úÖ –ß–∏—Ç–∞–Ω–Ω—è –∑ migrations/DATA-TrinitY-3.txt
- ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ rtg_addr —Å–µ–∫—Ü—ñ—ó (334 –∑–∞–ø–∏—Å–∏)
- ‚úÖ –û–±—Ä–æ–±–∫–∞ pipe-delimited —Ñ–æ—Ä–º–∞—Ç—É

### 8. –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö/–¥—É–±–ª—å–æ–≤–∞–Ω–∏—Ö/–ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
- ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö

### 9. DRY RUN —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
- ‚úÖ –ü–æ–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
- ‚úÖ –†–æ–±–æ—Ç–∞ –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å –≤ DRY RUN —Ä–µ–∂–∏–º—ñ

### 10. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
- ‚úÖ –ü–æ–≤–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
- ‚úÖ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
- ‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —ñ—Å–Ω—É—é—á–∏–º migrate.py

## –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ

### –§–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ/–º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ:
- `src/utils/migration_data_parser.py` - –Ω–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- `src/migrators/rtg_addr.py` - –ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–∏–π –º—ñ–≥—Ä–∞—Ç–æ—Ä
- `MIGRATION_RTG_ADDR_INSTRUCTIONS.md` - —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏:
- –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: 334
- –ó–∞–ø–∏—Å–∏ –∑ –≤—É–ª–∏—Ü—è–º–∏: 132
- –ó–∞–ø–∏—Å–∏ –∑ –±—É–¥—ñ–≤–ª—è–º–∏: 120  
- –ó–∞–ø–∏—Å–∏ –∑ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏: 102
- –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏: 9
- –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Å—Ç–∞: 202
- –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤—É–ª–∏—Ü—ñ: 66

### –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
- –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
- –†–æ–±–æ—Ç–∞ –∑ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ (psycopg2, tqdm)
- Fallback —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –ë–î
- Univers–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π

## –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó

### –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫:
```bash
python migrate.py --tables rtg_addr --dry-run --batch-size 50
```

### –ü–æ–≤–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è:
```bash
python migrate.py --tables rtg_addr --batch-size 1000
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–†–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–∏–π –º—ñ–≥—Ä–∞—Ç–æ—Ä –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º –≤–∏–º–æ–≥–∞–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ."""

    try:
        with open('REFACTORING_SUMMARY.md', 'w', encoding='utf-8') as f:
            f.write(summary)
        print("üìã –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ REFACTORING_SUMMARY.md")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    if test_migration_components():
        create_migration_summary()
        print("\nüöÄ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ RTG_ADDR –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
        sys.exit(1)