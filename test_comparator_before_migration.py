#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –î–û –º—ñ–≥—Ä–∞—Ü—ñ—ó (–Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö)"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.utils.validators import get_universal_comparator
import psycopg2
from config.database import SQLALCHEMY_URL
import pandas as pd
from sqlalchemy import create_engine

def test_comparator_before_migration():
    """–¢–µ—Å—Ç –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLAlchemy –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
    engine = create_engine(SQLALCHEMY_URL)
    comparator = get_universal_comparator()
    
    print("üîç –¢–ï–°–¢ –ö–û–ú–ü–ê–†–ê–¢–û–†–ê –î–û –ú–Ü–ì–†–ê–¶–Ü–á")
    print("=" * 50)
    
    # 1. –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∑ bld_local
    print("üìã –ê–ù–ê–õ–Ü–ó bld_local:")
    try:
        df_bld = pd.read_sql("""
            SELECT DISTINCT 
                street_ukr,
                raion,
                type_ukr,
                adres_n_uk,
                adres_o_uk
            FROM addr.bld_local 
            WHERE street_ukr IS NOT NULL 
            LIMIT 20
        """, engine)
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df_bld)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —É bld_local")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—è–∫—ñ –¥–∞–Ω—ñ
        if len(df_bld) > 0:
            print("\nüìä –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö –∑ bld_local:")
            for i, row in df_bld.head(3).iterrows():
                print(f"  –í—É–ª–∏—Ü—è: {row['street_ukr']}")
                print(f"  –†–∞–π–æ–Ω: {row['raion']}")
                print(f"  –ù–æ–≤–∞ –∞–¥—Ä–µ—Å–∞: {row['adres_n_uk']}")
                print(f"  –°—Ç–∞—Ä–∞ –∞–¥—Ä–µ—Å–∞: {row['adres_o_uk']}")
                print()
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É bld_local: {e}")
    
    # 2. –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∑ ek_addr
    print("üìã –ê–ù–ê–õ–Ü–ó ek_addr:")
    try:
        df_ek = pd.read_sql("""
            SELECT DISTINCT 
                district,
                street_type,
                street,
                build
            FROM addr.ek_addr 
            WHERE street IS NOT NULL 
            LIMIT 10
        """, engine)
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df_ek)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —É ek_addr")
        
        if len(df_ek) > 0:
            print("\nüìä –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö –∑ ek_addr:")
            for i, row in df_ek.head(3).iterrows():
                print(f"  –†–∞–π–æ–Ω: {row['district']}")
                print(f"  –¢–∏–ø: {row['street_type']}")
                print(f"  –í—É–ª–∏—Ü—è: {row['street']}")
                print(f"  –ë—É–¥–∏–Ω–æ–∫: {row['build']}")
                print()
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É ek_addr: {e}")
    
    # 3. –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∑ rtg_addr
    print("üìã –ê–ù–ê–õ–Ü–ó rtg_addr:")
    try:
        df_rtg = pd.read_sql("""
            SELECT DISTINCT 
                city,
                city_district,
                street_type,
                street,
                building
            FROM addr.rtg_addr 
            WHERE street IS NOT NULL AND city = '–î–Ω—ñ–ø—Ä–æ'
            LIMIT 10
        """, engine)
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df_rtg)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —É rtg_addr (–î–Ω—ñ–ø—Ä–æ)")
        
        if len(df_rtg) > 0:
            print("\nüìä –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö –∑ rtg_addr:")
            for i, row in df_rtg.head(3).iterrows():
                print(f"  –ú—ñ—Å—Ç–æ: {row['city']}")
                print(f"  –†–∞–π–æ–Ω: {row['city_district']}")
                print(f"  –¢–∏–ø: {row['street_type']}")
                print(f"  –í—É–ª–∏—Ü—è: {row['street']}")
                print(f"  –ë—É–¥–∏–Ω–æ–∫: {row['building']}")
                print()
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É rtg_addr: {e}")
    
    # 4. –¢–µ—Å—Ç –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    print("üß™ –¢–ï–°–¢ –ö–û–ú–ü–ê–†–ê–¢–û–†–ê:")
    
    # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_data = []
    
    # –ó bld_local
    if len(df_bld) > 0:
        streets = df_bld['street_ukr'].dropna().unique()[:5]
        test_data.extend([(street, "street") for street in streets])
    
    # –ó ek_addr
    if len(df_ek) > 0:
        districts = df_ek['district'].dropna().unique()[:3]
        test_data.extend([(district, "district") for district in districts])
        
        street_types = df_ek['street_type'].dropna().unique()[:3]
        test_data.extend([(st_type, "street_type") for st_type in street_types])
    
    # –ó rtg_addr
    if len(df_rtg) > 0:
        city_districts = df_rtg['city_district'].dropna().unique()[:3]
        test_data.extend([(district, "district") for district in city_districts])
    
    print(f"\n–í—Å—å–æ–≥–æ –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {len(test_data)}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω –æ–±'—î–∫—Ç
    for i, (name, obj_type) in enumerate(test_data[:10]):  # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
        print(f"\n--- –¢–µ—Å—Ç {i+1}: '{name}' ({obj_type}) ---")
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
        normalized = comparator.normalize_text(str(name), obj_type)
        print(f"–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: '{normalized}'")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–ø–æ–∫–∏ —â–æ –±–µ–∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–∏–º–∏)
        validation = comparator.validate_object_universally(str(name), obj_type)
        print(f"–†—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏: {validation['confidence_level']}")
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {validation['recommendation']}")
    
    # 5. –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –∑ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö
    print("\nüéØ –°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –¢–ï–°–¢–ò:")
    
    special_tests = [
        ("–°–¢–ê–†–ò–ô –®–õ–Ø–•", "–ö–Ü–†–û–í–ê", "street"),
        ("–ó–û–õ–û–¢–û–û–°–Ü–ù–ù–Ø", "–ñ–û–í–¢–ù–ï–í–ê", "street"),
        ("–í–£–õ.", "–≤—É–ª–∏—Ü—è", "street_type"),
        ("–¢–ê–†–û–ú–°–ö–û", "–¢–∞—Ä–æ–º—Å—å–∫–∏–π", "district"),
        ("–¢–æ–ø–æ–ª—è-2", "–¢–æ–ø–æ–ª—è 2", "district")
    ]
    
    for name1, name2, obj_type in special_tests:
        print(f"\n--- '{name1}' vs '{name2}' ({obj_type}) ---")
        similarity = comparator.calculate_comprehensive_similarity(name1, name2, obj_type)
        print(f"–°—Ö–æ–∂—ñ—Å—Ç—å: {similarity:.3f}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        validation1 = comparator.validate_object_universally(name1, obj_type)
        validation2 = comparator.validate_object_universally(name2, obj_type)
        print(f"'{name1}': {validation1['confidence_level']}")
        print(f"'{name2}': {validation2['confidence_level']}")
    
    engine.dispose()

if __name__ == "__main__":
    test_comparator_before_migration()