#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ rtg_addr"""

import sys
import os

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, 'src', 'utils'))

# –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
try:
    from src.utils.migration_data_parser import MigrationDataParser
except ImportError:
    sys.path.insert(0, os.path.join(project_root, 'src', 'utils'))
    from migration_data_parser import MigrationDataParser


def test_refactored_migrator():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î"""
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ RTG_ADDR –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–∞–Ω–∏—Ö
    print("1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
    try:
        parser = MigrationDataParser()
        records = parser.parse_rtg_addr_section()
        print(f"   ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = parser.get_statistics([parser.normalize_record(r) for r in records])
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö:")
        for key, value in stats.items():
            print(f"      {key}: {value}")
            
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
        if records:
            normalized = parser.normalize_record(records[0])
            print(f"\n   üìù –ü—Ä–∏–∫–ª–∞–¥ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É (ID: {normalized['id']}):")
            for key, value in normalized.items():
                if value is not None:
                    print(f"      {key}: {value}")
                    
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    # –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –≤ DRY RUN —Ä–µ–∂–∏–º—ñ
    print(f"\n2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –≤ DRY RUN —Ä–µ–∂–∏–º—ñ...")
    try:
        # –Ü–º–ø–æ—Ä—Ç –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤—ñ–¥ –ë–î
        sys.path.insert(0, os.path.join(project_root, 'src', 'migrators'))
        from rtg_addr_refactored import RefactoredRtgAddrMigrator
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        migrator = RefactoredRtgAddrMigrator()
        
        # –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –≤ DRY RUN —Ä–µ–∂–∏–º—ñ
        results = migrator.migrate(dry_run=True, batch_size=5)
        
        print("   ‚úÖ DRY RUN –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        for key, value in results.items():
            if value > 0:
                print(f"      {key}: {value}")
                
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        print(f"      –î–µ—Ç–∞–ª—ñ: {traceback.format_exc()}")
    
    print(f"\n3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É...")
    try:
        migrator = RefactoredRtgAddrMigrator()
        
        test_cases = [
            ("–≤—É–ª.", "street_type"),
            ("–ø—Ä–æ—Å–ø", "street_type"),
            ("–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "district"),
            ("  –ö–∏—ó–≤  ", "city"),
            ("", None)
        ]
        
        print("   üîÑ –¢–µ—Å—Ç–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó:")
        for text, obj_type in test_cases:
            normalized = migrator.normalize_text(text, obj_type)
            print(f"      '{text}' ({obj_type}) -> '{normalized}'")
            
        print("   ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    print(f"\n4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π...")
    try:
        from rtg_addr_refactored import create_migration_instructions
        create_migration_instructions()
        print("   ‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ MIGRATION_RTG_ADDR_README.md")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_refactored_migrator()